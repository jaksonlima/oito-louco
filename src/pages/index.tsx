import { Col, Container, Input, Row, Spacer } from "@nextui-org/react";
import Head from "next/head";
import { Card, Button, Text } from "@nextui-org/react";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { Collapse, Grid } from "@nextui-org/react";
import { Table } from "@nextui-org/react";

type Payer = {
  id?: string;
  name: string;
  points: number;
};

type Payers = {
  players: Payer[];
  end?: string | null;
};

function revisedRandId() {
  return Math.random()
    .toString(36)
    .replace(/[^a-z]+/g, "")
    .substr(2, 10);
}

export default function Home() {
  const [players, setPlayers] = useState<Payers>({ players: [], end: null });
  const {
    register,
    handleSubmit,
    reset,
    clearErrors,
    formState: { errors },
  } = useForm<Payer>();

  function addPlayer(data: Payer) {
    data.id = revisedRandId();

    const newPlayers: Payers = {
      ...players,
      players: [data, ...players.players],
    };

    setPlayers(newPlayers);
  }

  function addPoints(data: Payer, points: number) {
    setPlayers((old) => {
      const newPlayers = old.players.map((it) => {
        if (it.id === data.id) {
          it.points = Number(it.points) + Number(points);
        }
        return it;
      });

      return {
        ...old,
        players: newPlayers,
      };
    });
  }

  function removePlayers(data: Payer) {
    setPlayers((old) => {
      const newPlayers = old.players.filter((it) => it.id !== data.id);

      return {
        ...old,
        players: newPlayers,
      };
    });
  }

  const onSubmit = (data: Payer) => {
    addPlayer(data);
    reset();
    clearErrors();
  };

  return (
    <>
      <Head>
        <title>Oito loco</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Nav>
        <Container xs>
          <CollapseApp
            players={players}
            setPlayers={setPlayers}
            collapse1={
              <div style={{ margin: "27px" }}>
                <form onSubmit={handleSubmit(onSubmit)}>
                  <div style={{ display: "flex", flexDirection: "column" }}>
                    <Input
                      aria-label="Name"
                      {...register("name", {
                        required: {
                          value: true,
                          message: "Nome é obrigatório.",
                        },
                      })}
                      labelPlaceholder="Nome do jogador"
                      helperText={errors["name"]?.message as string}
                      helperColor={
                        errors["name"]?.message !== null ? "warning" : "default"
                      }
                    />
                    <Spacer y={2} />
                    <Input
                      aria-label="Points"
                      {...register("points")}
                      type="number"
                      labelPlaceholder="Pontos iniciais 0"
                    />
                    <Spacer y={2} />
                    <Button
                      type="submit"
                      icon={<UserIcon />}
                      shadow
                      color="gradient"
                      auto
                    >
                      Adicionar Jogador
                    </Button>
                  </div>
                </form>
              </div>
            }
          />

          <Spacer y={1} />
          <div
            style={{
              display: "flex",
              flexWrap: "wrap",
              gap: "10px",
              justifyContent: "center",
            }}
          >
            {players.players
              .sort((a: Payer, b: Payer) => (a.name < b.name ? -1 : 0))
              .map((player) => (
                <Card4
                  key={player.id}
                  payer={player}
                  addPoints={addPoints}
                  removePlayer={removePlayers}
                />
              ))}
          </div>
          <Spacer y={1} />
        </Container>
      </Nav>
    </>
  );
}

type CardProps = {
  payer: Payer;
  addPoints: (data: Payer, points: number) => void;
  removePlayer: (data: Payer) => void;
};

export const Card4 = ({ payer, addPoints, removePlayer }: CardProps) => {
  const [points, setPoints] = useState<number>();

  return (
    <Card css={{ maxW: "222px", h: "250px" }}>
      <div
        style={{
          position: "absolute",
          zIndex: 2,
          top: 5,
          right: -40,
          width: "93px",
        }}
      >
        <Button
          flat
          auto
          rounded
          color="error"
          onClick={() => {
            console.log("remove button");
            removePlayer(payer);
          }}
        >
          <Text
            css={{ color: "inherit" }}
            size={12}
            weight="bold"
            transform="uppercase"
          >
            X
          </Text>
        </Button>
      </div>
      <Card.Header css={{ position: "absolute", zIndex: 1, top: 5 }}>
        <Col>
          <Text size={12} weight="bold" transform="uppercase" color="#ffffffAA">
            #{payer?.id}
          </Text>
          <Text h3 color="black">
            {payer.name}
          </Text>
        </Col>
      </Card.Header>
      <Card.Body css={{ p: 0 }}>
        <Card.Image
          src="https://nextui.org/images/card-example-6.jpeg"
          width="100%"
          height="100%"
          objectFit="cover"
          alt="Card example background"
        />
      </Card.Body>
      <Card.Footer
        isBlurred
        css={{
          position: "absolute",
          bgBlur: "#ffffff66",
          borderTop: "$borderWeights$light solid rgba(255, 255, 255, 0.2)",
          bottom: 0,
          zIndex: 1,
        }}
      >
        <Row>
          <Col>
            <Text color="#000" size={12} style={{ fontWeight: "500" }}>
              Pontos {Number(payer.points ?? 0)}
            </Text>
            <Spacer y={0.2} />
            <Input
              aria-label="Points"
              type="number"
              bordered
              placeholder="Ponto"
              onChange={(env) => {
                setPoints(Number(env.target.value));
              }}
            />
          </Col>
          <Col>
            <Row justify="flex-end">
              <Button
                flat
                auto
                rounded
                color="secondary"
                onClick={() => {
                  if (points && points > 0) {
                    addPoints(payer, points);
                    setPoints(0);
                  }
                }}
              >
                <Text
                  css={{ color: "inherit" }}
                  size={12}
                  weight="bold"
                  transform="uppercase"
                >
                  Enviar
                </Text>
              </Button>
            </Row>
          </Col>
        </Row>
      </Card.Footer>
    </Card>
  );
};

export const UserIcon = ({
  fill = "currentColor",
  filled,
  size,
  height,
  width,
  label,
  ...props
}: any) => {
  return (
    <svg
      data-name="Iconly/Curved/Profile"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      width={size || width || 24}
      height={size || height || 24}
      {...props}
    >
      <g
        fill="none"
        stroke={fill}
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeMiterlimit={10}
        strokeWidth={1.5}
      >
        <path
          data-name="Stroke 1"
          d="M11.845 21.662C8.153 21.662 5 21.088 5 18.787s3.133-4.425 6.845-4.425c3.692 0 6.845 2.1 6.845 4.4s-3.134 2.9-6.845 2.9z"
        />
        <path
          data-name="Stroke 3"
          d="M11.837 11.174a4.372 4.372 0 10-.031 0z"
        />
      </g>
    </svg>
  );
};

type CollapseAppProps = {
  collapse1: JSX.Element;
  players: Payers;
  setPlayers: (data: Payers) => void;
};

export function CollapseApp({
  collapse1,
  players,
  setPlayers,
}: CollapseAppProps) {
  const [_, reset] = useState(true);
  return (
    <Grid.Container gap={2}>
      <Grid style={{ width: "inherit" }}>
        <Collapse.Group bordered>
          <Collapse title="Jogadores" expanded>
            {collapse1}
          </Collapse>
          <Collapse title="Configuração">
            <div>
              <Text>Reiniciar e restaurar jogadores da última partida ?</Text>
              <Spacer y={0.2} />
              <Button rounded color="success" shadow style={{ margin: "7px" }}>
                <Text
                  css={{ color: "inherit" }}
                  size={12}
                  weight="bold"
                  transform="uppercase"
                  onClick={() => {
                    if (players?.players?.length <= 0) return;

                    const endDate = new Date().toJSON();

                    players.end = endDate;

                    localStorage.setItem(endDate, JSON.stringify(players));

                    const startPlayers: Payers = {
                      end: null,
                      players: players.players.map((it) => {
                        it.points = 0;
                        return it;
                      }),
                    };

                    setPlayers(startPlayers);
                  }}
                >
                  Confirmar
                </Text>
              </Button>
            </div>
            <Spacer y={1} />
            <div>
              <Text>Finalizar partida ?</Text>
              <Spacer y={0.2} />
              <Button
                rounded
                color="warning"
                shadow
                style={{ margin: "7px" }}
                onClick={() => {
                  if (players?.players?.length <= 0) return;

                  const endDate = new Date().toJSON();

                  setPlayers({ players: [], end: null });

                  players.end = endDate;

                  localStorage.setItem(endDate, JSON.stringify(players));
                }}
              >
                <Text
                  css={{ color: "inherit" }}
                  size={12}
                  weight="bold"
                  transform="uppercase"
                >
                  Confirmar
                </Text>
              </Button>
            </div>
          </Collapse>
          <Collapse title="Histórico">
            <Text>Histórico de partidas.</Text>
            <div>
              <Text>Deseja limpar histórico de partidas ?</Text>
              <Spacer y={0.2} />
              <Button rounded color="error" shadow style={{ margin: "7px" }}>
                <Text
                  css={{ color: "inherit" }}
                  size={12}
                  weight="bold"
                  transform="uppercase"
                  onClick={() => {
                    localStorage.clear();
                    reset(!_);
                  }}
                >
                  Confirmar
                </Text>
              </Button>
            </div>
            <Collapse.Group>
              {typeof window !== "undefined" &&
                localStorage &&
                Object.entries(localStorage).map(([end, playersJson]) => {
                  const endDate = new Date(end).toLocaleString("pt-BR");
                  const players = JSON.parse(playersJson) as Payers;

                  return (
                    <>
                      <Collapse title={endDate}>
                        <Table
                          aria-label="Example table with static content"
                          css={{
                            height: "auto",
                            minWidth: "100%",
                          }}
                        >
                          <Table.Header>
                            <Table.Column>Nome</Table.Column>
                            <Table.Column>Pontos</Table.Column>
                          </Table.Header>
                          <Table.Body>
                            {players?.players?.map((player) => (
                              <Table.Row key={player.id}>
                                <Table.Cell>{player.name}</Table.Cell>
                                <Table.Cell>{player.points}</Table.Cell>
                              </Table.Row>
                            ))}
                          </Table.Body>
                        </Table>
                      </Collapse>
                    </>
                  );
                })}
            </Collapse.Group>
          </Collapse>
        </Collapse.Group>
      </Grid>
    </Grid.Container>
  );
}

import { Navbar, Link, useTheme } from "@nextui-org/react";
import { styled } from "@nextui-org/react";
import Image from "next/image";

export const Box = styled("div", {
  boxSizing: "border-box",
});

export const Layout = ({ children }: any) => (
  <Box
    css={{
      maxW: "100%",
    }}
  >
    {children}
    {/* <Content /> */}
  </Box>
);

export function Nav({ children }: any) {
  const { isDark } = useTheme();

  return (
    <>
      <Layout>
        <Navbar shouldHideOnScroll isBordered={isDark} variant="sticky">
          <Navbar.Brand>
            <Image
              src="/playing-cards.png"
              alt="card"
              width={50}
              height={50}
              style={{ borderRadius: "10px" }}
            />
          </Navbar.Brand>
          <Navbar.Content hideIn="xs" variant="underline">
            <Navbar.Link isActive href="#">
              Inicio
            </Navbar.Link>
            <Navbar.Link href="#">
              <ModalRegras />
            </Navbar.Link>
            <Navbar.Link href="#">
              <ModalDesenvolvidoPor />
            </Navbar.Link>
          </Navbar.Content>
          <Navbar.Content>
            <Navbar.Link color="inherit" href="#">
              Entrar
            </Navbar.Link>
            <Navbar.Item>
              <Button auto flat as={Link} href="#">
                Sair
              </Button>
            </Navbar.Item>
          </Navbar.Content>
        </Navbar>
      </Layout>
      {children}
    </>
  );
}

import { Modal, useModal } from "@nextui-org/react";

function ModalRegras() {
  const { setVisible, bindings } = useModal();
  return (
    <div>
      <Button auto flat onPress={() => setVisible(true)}>
        Regras
      </Button>
      <Modal
        scroll
        width="600px"
        aria-labelledby="modal-title"
        aria-describedby="modal-description"
        {...bindings}
      >
        <Modal.Header>
          <Text id="modal-title" size={18}>
            Regras e documentação de uso.
          </Text>
        </Modal.Header>
        <Modal.Body>
          <Text id="modal-description">Autores:</Text>
          <Text id="modal-description">Nison</Text>
          <Text id="modal-description">Vera</Text>
          <Text id="modal-description">Allan</Text>
          <Text id="modal-description">Karen</Text>
          <Text id="modal-description">Bruna</Text>
          <Text id="modal-description">Jakson</Text>
        </Modal.Body>
        <Modal.Footer>
          <Button auto flat color="error" onPress={() => setVisible(false)}>
            Fechar
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}

function ModalDesenvolvidoPor() {
  const [visible, setVisible] = useState(false);
  const handler = () => setVisible(true);
  const closeHandler = () => {
    setVisible(false);
    console.log("closed");
  };
  return (
    <div>
      <Button auto color="warning" flat onPress={handler}>
        Desenvolvido Por
      </Button>
      <Modal
        closeButton
        blur
        aria-labelledby="modal-title"
        open={visible}
        onClose={closeHandler}
      >
        <Modal.Header>
          <Text id="modal-title" b size={18}>
            Jakson Lima
          </Text>
        </Modal.Header>
        <Modal.Body>
          <Text id="modal-title" b size={18}>
            <a
              href="https://www.linkedin.com/in/jakson-lima-68264b160/"
              target="_blank"
            >
              LinkedIn
            </a>
          </Text>
        </Modal.Body>
        <Modal.Footer>
          <Button auto flat color="error" onPress={closeHandler}>
            Fechar
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}
